// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TrinityPlayer
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import AppTrackingTransparency
import Combine
import CoreGraphics
import Foundation
import Swift
import SwiftUI
@_exported import TrinityPlayer
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_Concurrency.MainActor(unsafe) public struct TrinityAudioPlayer : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(audioController: TrinityPlayer.TrinityAudioController)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13TrinityPlayer0a5AudioB0V4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class TrinityAudio : TrinityPlayer.UIKitTrinityAudioProtocol {
  public static func newInstance() -> any TrinityPlayer.UIKitTrinityAudioProtocol
  weak public var delegate: (any TrinityPlayer.TrinityAudioDelegate)?
  public func invalidate()
  public func render(parentViewController: UIKit.UIViewController, unitId: Swift.String, sourceView: UIKit.UIView, fabViewTopLeftCoordinates: CoreFoundation.CGPoint?, contentURL: Foundation.URL, settings: [Swift.String : Swift.String]?)
  public func evaluate(javaScript: Swift.String)
  public func pause(playerID maybePlayerID: Swift.String?)
  public func pauseAll()
  @objc deinit
}
public class TrinityAudioController : Foundation.ObservableObject, TrinityPlayer.TrinityAudioProtocol {
  public var delegate: (any TrinityPlayer.TrinityAudioDelegate)?
  public init(unitId: Swift.String, contentURL: Swift.String, settings: [Swift.String : Swift.String]? = nil, delegate: (any TrinityPlayer.TrinityAudioDelegate)? = nil)
  public func evaluate(javaScript: Swift.String)
  public func pause(playerID: Swift.String?)
  public func pauseAll()
  public func invalidate()
  @objc deinit
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
public enum TrinityState {
  case main
  case fab
  public static func == (a: TrinityPlayer.TrinityState, b: TrinityPlayer.TrinityState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TrinityParams : Swift.String {
  case appName
  case appVersion
  case appBundleId
  case appIDFA
  case darkModeisOn
  case SDKVersion
  case trinityVersion
  case isDebug
  case appStoreURL
  case GDPR
  case GDPRConsent
  case USPrivacy
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TrinityError : Swift.Error {
  case wrongURL
  case paramsIsEmpty
  case wrongParams
  case containerViewNotLoaded
  case somethingWrong(error: (any Swift.Error)?)
}
public protocol TrinityAudioDelegate : AnyObject {
  func trinity(service: any TrinityPlayer.TrinityAudioProtocol, receiveError: TrinityPlayer.TrinityError)
  func trinity(service: any TrinityPlayer.TrinityAudioProtocol, detectUpdateForContentHeight height: Swift.Float, inState state: TrinityPlayer.TrinityState)
  func trinity(service: any TrinityPlayer.TrinityAudioProtocol, didCheckCookie cookieData: [Swift.String : Any])
  func trinity(service: any TrinityPlayer.TrinityAudioProtocol, didReceivePostMessage: [Swift.String : Any])
}
public protocol TrinityAudioProtocol {
  var delegate: (any TrinityPlayer.TrinityAudioDelegate)? { get set }
  func evaluate(javaScript: Swift.String)
  func pause(playerID: Swift.String?)
  func pauseAll()
  func invalidate()
}
public protocol UIKitTrinityAudioProtocol : TrinityPlayer.TrinityAudioProtocol {
  func render(parentViewController: UIKit.UIViewController, unitId: Swift.String, sourceView: UIKit.UIView, fabViewTopLeftCoordinates: CoreFoundation.CGPoint?, contentURL: Foundation.URL, settings: [Swift.String : Swift.String]?)
}
extension SwiftUI.View {
  public func trinityFAB(controller: TrinityPlayer.TrinityAudioController, fabViewTopLeftCoordinates: CoreFoundation.CGPoint?) -> some SwiftUI.View
  
  public func trinityObserveScrollViewContentSize(controller: TrinityPlayer.TrinityAudioController) -> some SwiftUI.View
  
}
extension TrinityPlayer.TrinityState : Swift.Equatable {}
extension TrinityPlayer.TrinityState : Swift.Hashable {}
extension TrinityPlayer.TrinityParams : Swift.Equatable {}
extension TrinityPlayer.TrinityParams : Swift.Hashable {}
extension TrinityPlayer.TrinityParams : Swift.RawRepresentable {}
